/**
 * Author R. C. Howell 2020
 *
 * This package contains protobuf definitions for the Go Text Protocol 2.0 [1]. It is for use with gRPC
 * servers/controllers to communicate between applications and Go engines. You will find types have been adapted to
 * impose more structure on the protocol.
 *
 * [1] http://www.lysator.liu.se/~gunnar/gtp/
 */
syntax = "proto3";
package gtp;

option go_package = "github.com/rchowell/dandan/internal/gtp";

message Vertex {
  int32 row = 1;
  int32 column = 2;
}

enum Color {
  EMPTY = 0;
  BLACK = 1;
  WHITE = 2;
}

message Move {
  Type type = 1;
  Color color = 2;
  Vertex vertex = 3;

  enum Type {
    PASS = 0;
    RESIGN = 1;
    PLACE = 2;
  }
}

message Error {
  string message = 2;
}

message ProtocolVersionRequest {
  int32 id = 1;
}

message ProtocolVersionResponse {
  int32 id = 1;
  int32 version = 2;
}

message NameRequest {
  int32 id = 1;
}

message NameResponse {
  int32 id = 1;
  string name = 2;
}

message VersionRequest {
  int32 id = 1;
}

message VersionResponse {
  int32 id = 1;
  string version = 2;
}

message IsKnownCommandRequest {
  int32 id = 1;
  string command = 2;
}

message IsKnownCommandResponse {
  int32 id = 1;
  bool known = 2;
}

message ListCommandsRequest {
  int32 id = 1;
}

message ListCommandsResponse {
  int32 id = 1;
  repeated string commands = 2;
}

message QuitRequest {
  int32 id = 1;
}

message QuitResponse {
  int32 id = 1;
  Error error = 2;
}

message SetBoardSizeRequest {
  int32 id = 1;
  int32 size = 2;
}

message SetBoardSizeResponse {
  int32 id = 1;
  Error error = 2;
}

message ClearBoardRequest {
  int32 id = 1;
}

message ClearBoardResponse {
  int32 id = 1;
}

message SetKomiRequest {
  int32 id = 1;
  float komi = 2;
}

message SetKomiResponse {
  int32 id = 1;
  Error error = 2;
}

message PlayRequest {
  int32 id = 1;
  Move move = 2;
}

message PlayResponse {
  int32 id = 1;
  Error error = 2;
}

message GenMoveRequest {
  int32 id = 1;
  Color color = 2;
}

message GenMoveResponse {
  int32 id = 1;
  Move move = 2;
}

message UndoRequest {
  int32 id = 1;
}

message UndoResponse {
  int32 id = 1;
  Error error = 2;
}

service GTP {

  // Version of the GTP Protocol
  rpc ProtocolVersion (ProtocolVersionRequest) returns (ProtocolVersionResponse) {}

  // E.g. “GNU Go”, “GoLois”, “Many Faces of Go”. The name does not include any version information. Use `version`.
  rpc Name (NameRequest) returns (NameResponse) {}

  // E.g. “3.1.33”, “10.5”. Engines without a sense of version number return the empty string.
  rpc Version (VersionRequest) returns (VersionResponse) {}

  // Returns “true” if the command is known by the engine, “false” otherwise
  rpc IsKnownCommand (IsKnownCommandRequest) returns (IsKnownCommandResponse) {}

  // Lists all known commands, including required ones and private extensions.
  rpc ListCommands (ListCommandsRequest) returns (ListCommandsResponse) {}

  // The session is terminated and the connection is closed.
  rpc Quit (QuitRequest) returns (QuitResponse) {}

  // Changes the board size. If the engine cannot handle the new size, fails with the error message ”unacceptable size”.
  rpc SetBoardSize (SetBoardSizeRequest) returns (SetBoardSizeResponse) {}

  // Clears the board, captured stones are reset, and move history is reset
  rpc ClearBoard (ClearBoardRequest) returns (ClearBoardResponse) {}

  // Changes the Komi
  rpc SetKomi (SetKomiRequest) returns (SetKomiResponse) {}

  // Plays the given move
  rpc Play (PlayRequest) returns (PlayResponse) {}

  // Asks the engine to generate a move, it will play it, and will return what was played
  rpc GenMove (GenMoveRequest) returns (GenMoveResponse) {}

  // The board and captured stones are reset to the previous move
  rpc Undo(UndoRequest) returns(UndoResponse) {}

}
